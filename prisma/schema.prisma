// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id         String     @id @default(uuid())
  email      String     @unique
  password   String
  properties Property[] // One-to-many relationship with Property
}

model Property {
  id               String          @id @default(uuid())
  userId           String
  user             User            @relation(fields: [userId], references: [id])
  name             String
  address          String
  city             String
  state            String
  postcode         String
  purchasePrice    Float
  closingCost      Float
  rentalIncome     Float
  expenses         Expense[] // One-to-many relationship with Expense
  mortgage         Mortgage? // One-to-one relationship with Mortgage
  appreciationRate Float
  analysis         AnalysisResult? // One-to-one relationship with AnalysisResult
  deleted          Boolean         @default(false)
  createdAt        DateTime        @default(now())
  updatedAt        DateTime        @updatedAt
}

model Expense {
  id             String   @id @default(uuid())
  propertyId     String
  property       Property @relation(fields: [propertyId], references: [id])
  propertyTaxes  Float
  insurance      Float
  hoaFees        Float?
  electricity    Float?
  waterAndSewer  Float?
  gas            Float?
  garbage        Float?
  repairs        Float?
  vacancy        Float?
  capitalExpend  Float?
  managementFees Float?
}

model Mortgage {
  id           String   @id @default(uuid())
  propertyId   String   @unique
  property     Property @relation(fields: [propertyId], references: [id])
  interestRate Float
  termYears    Int
  downPayment  Float
}

model AnalysisResult {
  id            String   @id @default(uuid())
  propertyId    String   @unique
  property      Property @relation(fields: [propertyId], references: [id])
  capRate       Float
  cashFlow       Float
  cashOnCashRoi Float // add cash flow
}
